generator serverClient {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  iin                String?        @unique(map: "User.iin_unique")
  password           String?
  firstName          String?
  middleName         String?
  lastName           String?
  phone              String?        @unique(map: "User.phone_unique")
  deletedAt          DateTime?
  userRoles          UserRole[]
  addresses          Address[]
  trustedDeliveries  Delivery[]     @relation("trustedDeliveryUser")
  acceptedDeliveries Delivery[]     @relation("acceptedByUser")
  requests           UserRequest[]  @relation("requesterUser")
  carrier            Carrier?
  providerOwner      ProviderOwner?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model UserRole {
  id        Int      @id @default(autoincrement())
  role      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, role], map: "UserRole.userId_role_unique")
}

model Request {
  id               Int           @id @default(autoincrement())
  requestCode      String        @unique(map: "Request.requestCode_unique")
  serviceName      String
  serviceCode      String
  organizationName String
  organizationLat  Decimal       @db.Decimal(14, 11)
  organizationLng  Decimal       @db.Decimal(14, 11)
  userRequests     UserRequest[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model UserRequest {
  id              Int       @id @default(autoincrement())
  requesterUser   User      @relation("requesterUser", fields: [requesterUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterUserId Int
  request         Request   @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestId       Int
  status          String
  delivery        Delivery?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Carrier {
  id         Int             @id @default(autoincrement())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int             @unique(map: "Carrier.userId_unique")
  provider   CarrierProvider @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId Int
  deliveries Delivery[]
  lat        Decimal         @db.Decimal(14, 11)
  lng        Decimal         @db.Decimal(14, 11)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model CarrierProvider {
  id              Int           @id @default(autoincrement())
  name            String
  providerOwner   ProviderOwner @relation(fields: [providerOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerOwnerId Int
  carriers        Carrier[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deliveries      Delivery[]
}

model ProviderOwner {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int               @unique(map: "ProviderOwner.userId_unique")
  carrierProviders CarrierProvider[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Delivery {
  id                    Int             @id @default(autoincrement())
  phone                 String
  address               Address         @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId             Int
  carrier               Carrier?        @relation(fields: [carrierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carrierId             Int?
  userRequest           UserRequest     @relation(fields: [userRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userRequestId         Int             @unique(map: "Delivery.userRequest_unique")
  trustedDeliveryUser   User?           @relation("trustedDeliveryUser", fields: [trustedDeliveryUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trustedDeliveryUserId Int?
  acceptedByUser        User?           @relation("acceptedByUser", fields: [acceptedByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  acceptedByUserId      Int?
  carrierProvider       CarrierProvider @relation(fields: [carrierProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carrierProviderId     Int
  status                String
  operatorCode          String
  clientCode            String
  deliveredAt           DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model Address {
  id          Int        @id @default(autoincrement())
  region      String
  city        String
  street      String
  houseNumber String
  apartment   String
  entrance    String
  floor       String?
  block       String
  name        String
  comments    String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  deliveries  Delivery[]
  lat         Decimal    @db.Decimal(14, 11)
  lng         Decimal    @db.Decimal(14, 11)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Verification {
  id    Int    @id @default(autoincrement())
  phone String
  code  String
}
